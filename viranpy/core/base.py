#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (c) Naveen Duhan

"""
Abstract base classes for ViRAnPy pipeline components.
"""

from abc import ABC, abstractmethod
from typing import Dict, Any, List, Optional
from pathlib import Path
import logging

from ..config import PipelineConfig
from ..utils.logger import PipelineLogger


class BaseAnnotator(ABC):
    """
    Abstract base class for annotation components.
    
    All annotation tools (gene prediction, tRNA detection, etc.) should inherit
    from this class and implement the required methods.
    """
    
    def __init__(self, config: PipelineConfig, logger: Optional[logging.Logger] = None):
        """
        Initialize the annotator.
        
        Args:
            config: Pipeline configuration
            logger: Logger instance
        """
        self.config = config
        self.logger = logger or logging.getLogger(__name__)
        self.name = self.__class__.__name__
    
    @abstractmethod
    def run(self, input_file: str, **kwargs) -> Dict[str, Any]:
        """
        Run the annotation step.
        
        Args:
            input_file: Input file path
            **kwargs: Additional arguments
            
        Returns:
            Dictionary containing annotation results
        """
        pass
    
    @abstractmethod
    def validate_input(self, input_file: str) -> bool:
        """
        Validate input file.
        
        Args:
            input_file: Input file path
            
        Returns:
            True if input is valid, False otherwise
        """
        pass
    
    def check_dependencies(self) -> bool:
        """
        Check if required dependencies are available.
        
        Returns:
            True if all dependencies are available, False otherwise
        """
        return True
    
    def get_output_files(self) -> List[str]:
        """
        Get list of output files generated by this annotator.
        
        Returns:
            List of output file paths
        """
        return []


class BasePredictor(ABC):
    """
    Abstract base class for prediction components.
    
    All prediction tools (protein function prediction, etc.) should inherit
    from this class and implement the required methods.
    """
    
    def __init__(self, config: PipelineConfig, logger: Optional[logging.Logger] = None):
        """
        Initialize the predictor.
        
        Args:
            config: Pipeline configuration
            logger: Logger instance
        """
        self.config = config
        self.logger = logger or logging.getLogger(__name__)
        self.name = self.__class__.__name__
    
    @abstractmethod
    def predict(self, input_file: str, **kwargs) -> Dict[str, Any]:
        """
        Run the prediction step.
        
        Args:
            input_file: Input file path
            **kwargs: Additional arguments
            
        Returns:
            Dictionary containing prediction results
        """
        pass
    
    @abstractmethod
    def validate_input(self, input_file: str) -> bool:
        """
        Validate input file.
        
        Args:
            input_file: Input file path
            
        Returns:
            True if input is valid, False otherwise
        """
        pass
    
    def check_dependencies(self) -> bool:
        """
        Check if required dependencies are available.
        
        Returns:
            True if all dependencies are available, False otherwise
        """
        return True
    
    def get_output_files(self) -> List[str]:
        """
        Get list of output files generated by this predictor.
        
        Returns:
            List of output file paths
        """
        return []


class BaseProcessor:
    """
    Base class for data processing components.
    
    Provides common functionality for data processing steps.
    """
    
    def __init__(self, config: PipelineConfig, logger: Optional[logging.Logger] = None):
        """
        Initialize the processor.
        
        Args:
            config: Pipeline configuration
            logger: Logger instance
        """
        self.config = config
        self.logger = logger or logging.getLogger(__name__)
        self.name = self.__class__.__name__
    
    def process(self, input_file: str, **kwargs) -> Dict[str, Any]:
        """
        Process the input file.
        
        Args:
            input_file: Input file path
            **kwargs: Additional arguments
            
        Returns:
            Dictionary containing processing results
        """
        with PipelineLogger(f"{self.name} processing", self.logger):
            if not self.validate_input(input_file):
                raise ValueError(f"Invalid input file: {input_file}")
            
            if not self.check_dependencies():
                raise RuntimeError(f"Dependencies not available for {self.name}")
            
            return self._process_impl(input_file, **kwargs)
    
    @abstractmethod
    def _process_impl(self, input_file: str, **kwargs) -> Dict[str, Any]:
        """
        Implementation of the processing step.
        
        Args:
            input_file: Input file path
            **kwargs: Additional arguments
            
        Returns:
            Dictionary containing processing results
        """
        pass
    
    def validate_input(self, input_file: str) -> bool:
        """
        Validate input file.
        
        Args:
            input_file: Input file path
            
        Returns:
            True if input is valid, False otherwise
        """
        return Path(input_file).exists()
    
    def check_dependencies(self) -> bool:
        """
        Check if required dependencies are available.
        
        Returns:
            True if all dependencies are available, False otherwise
        """
        return True
    
    def get_output_files(self) -> List[str]:
        """
        Get list of output files generated by this processor.
        
        Returns:
            List of output file paths
        """
        return [] 